from plainvoice.model.config import Config
from plainvoice.model.document.document import Document
from plainvoice.model.document.document import DocumentType


class Client(Document):
    '''
    This class holds information about the client.
    '''

    DEFAULT_FIELDS: dict = {
        'company': ('str', ''),
        'attention': ('str', 'Attn.'),
        'salutation': ('str', 'Mr.'),
        'first_name': ('str', ''),
        'last_name': ('str', '')
    }
    '''
    The dict describing the prebuilt fields and also
    holding the default values for it. It can describe
    the type of the prebuilt field and also fill its
    default value. I wanted to have this in one global
    variable so that it can get modified in one place
    easier.
    The key is the fieldname and its value is a tupple
    describing its type and default value.
    '''

    DEFAULT_FIELDS_TYPES: dict = {}
    DEFAULT_FIELDS_DEFAULTS: dict = {}
    '''
    These two variables are cache variables for the
    DEFAULT_FIELDS variable and will get filled
    on demand.
    '''

    def __init__(self, client_id: str = ''):
        '''
        This class is for clients data. It is supposed to be able
        to link to certain documents for the clients.

        Args:
            client_id (str): \
                The client id. (default: defined by the \
                method for finding the next id [TODO!].)
        '''
        client_id = client_id or 'TODO_NEXT_ID_METHOD_HERE'

        super().__init__(client_id, Config().client_folder)

        self.init_document_type()

        # name and id of the object is the same
        # for client objects
        self.id = client_id
        self.name = client_id
        self.load_from_name(self.name)

    def fill_empty_prebuilt_fields(self) -> None:
        """
        Fill the empty prebuilt fields, which will first
        be generated by the Document.fill_empty_prebuilt_fields()
        method and then fill those values with pre-filled
        data / defaults.
        """
        pass

    def from_dict(self, values: dict) -> None:
        '''
        Fill the objects attributes / data from the given dict.
        This overwrites the Document from_dict() method, which
        also have the from_dict_document_type() method in use.
        Yet for the client I need the hard coded DocumentType
        and thus does not want it be searched in the document
        types folder, since it should not exist there.

        Args:
            values (dict): The dict values to fill the object.
        '''
        super().from_dict(values)

        self.from_dict_data(values)

    def generate_default_fields_dict(self, what: str = '') -> dict:
        """
        Getting or generating the default fields dict. It can
        be the fieldnames with its types, the fieldnames with
        its defautl values or even the plain DEFAULT_FIELDS
        constant of this class (as a fallback).

        Args:
            what (str): \
                Choose from `'types'`, `'defaults'` or aynthing \
                else to get the DEFAULT_FIELDS constant.

        Returns:
            dict: Returns the wanted dict.
        """
        # initialize cache variables so that the for loop
        # will only have to run once.
        if (
            not self.DEFAULT_FIELDS_TYPES
            or not self.DEFAULT_FIELDS_DEFAULTS
        ):
            self.DEFAULT_FIELDS_TYPES = {}
            self.DEFAULT_FIELDS_DEFAULTS = {}
            for fieldname in self.DEFAULT_FIELDS:
                types = self.DEFAULT_FIELDS[fieldname][0]
                defaults = self.DEFAULT_FIELDS[fieldname][1]
                self.DEFAULT_FIELDS_TYPES[fieldname] = types
                self.DEFAULT_FIELDS_DEFAULTS[fieldname] = defaults
        if what == 'types':
            return self.DEFAULT_FIELDS_TYPES
        elif what == 'defaults':
            return self.DEFAULT_FIELDS_DEFAULTS
        else:
            return self.DEFAULT_FIELDS

    def init_document_type(self) -> None:
        """
        Initialize the document type. The class gets
        inherited from the Document class and with this
        method I want to define a hard coded DocumentType
        for just this client class.
        """
        doc_type = DocumentType('client', Config().client_folder)
        doc_type.set(
            'prebuilt_fields',
            self.generate_default_fields_dict('types')
        )
        self.document_type = doc_type

    def __str__(self) -> str:
        '''
        Represent this class as a string.

        Returns:
            srt: The readable string.
        '''
        client_id = self.id
        first = self.data_prebuilt['first_name']
        last = self.data_prebuilt['last_name']
        return f'{client_id}: {first} {last}'
